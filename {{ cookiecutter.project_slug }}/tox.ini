[flake8]
max-line-length = 88
# This ignore is required by black.
extend-ignore = E203
extend-exclude =
    venv

# This is the configuration for the tox-gh-actions plugin for GitHub Actions
#   https://github.com/ymyzk/tox-gh-actions
# This section is not needed if not using GitHub Actions for CI.
[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39

[tox]
# skipsdist = true
envlist =
    isort
    black
    check-manifest
    pyroma
    flake8
    pylint
    mypy
    doc8
    docstr-coverage
    security
    py{36,37,38,39}
skip_missing_interpreters = true

# Activate isolated build environment. tox will use a virtual environment
# to build a source distribution from the source tree. For build tools and
# arguments use the pyproject.toml file as specified in PEP-517 and PEP-518.
isolated_build = true

[testenv]
# To just run tests: tox -e py
description =
    The base test environment that runs tests and determines coverage
setenv =
    PYTHONPATH = {toxinidir}
deps =
    -rrequirements_dev.txt
commands =
    {envpython} -bb -Werror -m pytest \
        --cov={{ cookiecutter.project_slug }} \
        --cov-report=html \
        --cov-report=term {posargs}

[testenv:format]
description = Format all project files using isort and black
skip_install = true
deps =
    isort
    black
commands =
    isort src/{{ cookiecutter.project_slug }} tests
    black src/{{ cookiecutter.project_slug }}/ tests/

[testenv:black]
description = Enforce code style using black
skip_install = true
deps = black
commands =
    black --check src/{{ cookiecutter.project_slug }}/ tests/

[testenv:isort]
description = Check that imports are in the proper order and uniform across the project
skip_install = true
deps = isort
commands =
    isort --check src/{{ cookiecutter.project_slug }} tests

[testenv:check-manifest]
description = Check that MANIFEST.in has the appropriate settings
skip_install= true
deps = check-manifest
commands =
    check-manifest

[testenv:pyroma]
description = Determine package friendliness
skip_install = true
deps = pyroma
commands =
    pyroma --min=10 .

[testenv:flake8]
description = Check adherence to pep8 styling using flake8
skip_install = true
deps =
    flake8
    flake8-black
    flake8-bandit
    flake8-colors
    flake8-docstrings
    flake8-import-order
    flake8-bugbear
    pep8-naming
    pydocstyle
    darglint
commands =
    flake8 src setup.py tests

[testenv:pylint]
description = Check adherence to pep8 styling using pylint
skip_install = true
deps =
    {[testenv]deps}
commands =
    pylint src/{{ cookiecutter.project_slug }} setup.py tests

[testenv:mypy]
description = Run the mypy tool to check static typing on the project.
skip_install = true
deps = mypy
commands =
    mypy --install-types \
        --non-interactive \
        --ignore-missing-imports \
        src/{{ cookiecutter.project_slug }}/ tests/

[testenv:doc8]
description = Run the doc8 tool to check the style of the RST files in the project docs.
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source --ignore D004

[testenv:docstr-coverage]
description = Run the docstr-coverage tool to check documentation coverage
skip_install = true
deps = docstr-coverage
commands =
    docstr-coverage src/{{ cookiecutter.project_slug }}/ tests/ --skip-private --skip-magic

[testenv:security]
description = Tests the source code for any potential security issues
skip_install = true
deps = bandit
commands =
    bandit -r -s B101 src/{{ cookiecutter.project_slug }}

[testenv:docs-create]
description = (Re-)creates fresh sphinx-apidoc stubs
deps =
    {[testenv]deps}
changedir = {toxinidir}/docs
commands =
    sphinx-apidoc --force --output-dir source {toxinidir}/src/{{ cookiecutter.project_slug }}
    sphinx-build -a -W source build

[testenv:docs-build]
description = Builds the static html files based on the .rst files in source/
skip_install = true
deps =
    Sphinx
    sphinx-rtd-theme
changedir = {toxinidir}/docs
commands =
    sphinx-build -M html source build

[testenv:bumpversion]
passenv = HOME
skip_install = true
deps =
    bumpversion
commands =
    bumpversion {posargs}


[testenv:test-release]
description = Release the code to the test PyPI site
skip_install = true
deps =
    wheel
    setuptools
    twine >= 1.5.0
commands =
    python setup.py -q sdist bdist_wheel
    twine upload --skip-existing --repository-url https://test.pypi.org/simple/ dist/*
